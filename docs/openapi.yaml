openapi: 3.0.1
info:
  title: Keeping Touch
  description: ""
  contact:
    email: oscar.v.bautista@gmail.com
  version: 0.0.1
servers:
- url: https://localhost:5000/api
- url: http://localhost:5000/api
tags:
- name: auth
  description: Endpoints relating to user authentication
- name: user
  description: Endpoints relating to user customization
- name: notes
  description: Endpoints relating to notes
paths:
  /auth/register:
    post:
      tags:
      - auth
      summary: Register a new user and get a bearer token for the new user.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "username": { "type": "string" },
                  "password": { "type": "string" },
                  "email": { "type": "string" }
                },
                required: ["username", "email", "password"]
              }
            example:
              username: admin
              password: password
              email: email@email.com
        required: true
      responses:
        201:
          description: User successfully created.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "username": { "type": "string" },
                    "access_token": { "type": "string" },
                    "refresh_token": { "type": "string" }
                  },
                  required: ["username", "access_token", "refresh_token"]
                }
              example:
                username: admin
                access_token: access_token
                refresh_token: refresh_token
        403:
          description: User already exists and couldn't be created.
  /auth/login:
    post:
      tags:
      - auth
      summary: Get a bearer token for an existing user.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "username": { "type": "string" },
                  "password": { "type": "string" }
                },
                required: ["username", "password"]
              }
            example:
              username: admin
              password: password
      responses:
        200:
          description: Login successful.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "username": { "type": "string" },
                    "access_token": { "type": "string" },
                    "refresh_token": { "type": "string" }
                  },
                  required: ["username", "access_token", "refresh_token"]
                }
              example:
                username: admin
                access_token: access_token
                refresh_token: refresh_token
        404:
          description: User not found.
        401: 
          description: Wrong credentials.
  /user/password:
    put:
      tags:
      - user
      summary: Update a user's password.
      operationId: updatePassword
      security: 
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "old_password": { "type": "string" },
                  "password": { "type": "string" }
                },
                required: ["old_password", "password"]
              }
            example:
              old_password: "password"
              new_password: "password2"
        required: true
      responses:
        200:
          description: Password successfully updated.
        401:
          description: Authorization token is not present in header.  
        403:
          description: Old password does not match existing password.       
  /user/email:
    put:
      tags:
      - user
      summary: Update a user's email.
      operationId: updateEmail
      security: 
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "new_email": { "type": "string" }
                },
                required: ["new_email"]
              }
            example:
              new_email: "newemail@newemail.com"
        required: true
      responses:
        200:
          description: Email successfully updated.
        400:
          description: Email is not a valid email.
        401:
          description: Authorization token is not present in header.  
  /notes:
    get:
      tags:
      - notes
      summary: Get all notes linked to the Bearer token's account.
      operationId: getAllNotes
      security: 
      - bearerAuth: []
      responses:
        200:
          description: Notes obtained.
        401:
          description: Authorization token is not present in header.  
    post:
      tags:
      - notes
      summary: Create a new note with the Bearer token's account as an owner.
      operationId: createNote
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "title": { "type": "string" },
                  "goal_date": { "type": "string" },
                  "data": { "type": "string" }
                },
                required: ["title"]
              }
            example:
              title: "New note"
        required: true
      security: 
      - bearerAuth: []
      responses:
        200:
          description: Note created.
        401:
          description: Authorization token is not present in header.
  /notes/{note_id}:
    get:
      tags:
      - notes
      parameters: 
      - in: path
        name: note_id
        description: "ID of note to get information for."
        required: true
        schema:
          type: integer
      summary: Get all relevant data for specific note.
      operationId: getNote
      security: 
      - bearerAuth: []
      responses:
        200:
          description: Note obtained.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "id": { "type": "integer" },
                    "parent_id": { "type": "integer" },
                    "owner": { "type": "integer" },
                    "title" : { "type" : "string" },
                    "goal_date": { "type": "string" },
                    "data": { "type": "string" }
                  },
                  required: ["id", "owner", "title"]
                }
              example:
                id: 2
                parent_id: 1
                owner: 1
                title: Existing note
                goal_date: "11/30/2019"
                data: Contents of existing note.
        401:
          description: Authorization token is not present in header.  
        403:
          description: Note does not exist or user is not authorized to view this note.
    put:
      tags:
      - notes
      parameters: 
      - in: path
        name: note_id
        description: "ID of note to update."
        required: true
        schema:
          type: integer
      summary: Update note's content.
      operationId: updateNote
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "title": { "type": "string" },
                  "goal_date": { "type": "string" },
                  "data": { "type": "string" }
                }
              }
            example:
              title: "New note title"
              data: "This is the content of the note that just got updated."
        required: true
      security: 
      - bearerAuth: []
      responses:
        200:
          description: Note updated.
        400:
          description: Bad or malformed input.
        401:
          description: Authorization token is not present in header.    
        403:
          description: Note does not exist or user is not authorized to modify this note.
    delete:
      tags:
      - notes
      parameters:
      - in: path
        name: note_id
        description: "ID of note to update."
        required: true
        schema:
          type: integer
      summary: Delete note.
      operationId: deleteNote 
      responses:
        200:
          description: Note deleted.
        401:
          description: Authorization token is not present in header.    
        403:
          description: Note does not exist or user is not authorized to delete this note.
components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT 