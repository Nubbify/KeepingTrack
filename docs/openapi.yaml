openapi: 3.0.1
info:
  title: Keeping Touch
  description: ""
  contact:
    email: oscar.v.bautista@gmail.com
  version: 0.0.1
servers:
- url: https://localhost:5000/api
- url: http://localhost:5000/api
tags:
- name: auth
  description: Endpoints relating to user authentication
- name: user
  description: Endpoints relating to user customization
- name: notes
  description: Endpoints relating to notes
- name: categories
  description: Endpoints relating to categories 
- name: attach
  description: Endpoints relating to attachments
paths:
  /auth/register:
    post:
      tags:
      - auth
      summary: Register a new user and get a bearer token for the new user.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "username": { "type": "string" },
                  "password": { "type": "string" },
                  "email": { "type": "string" }
                },
                required: ["username", "email", "password"]
              }
            example:
              username: admin
              password: password
              email: email@email.com
        required: true
      responses:
        200:
          description: User successfully created.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "username": { "type": "string" },
                    "access_token": { "type": "string" },
                    "refresh_token": { "type": "string" }
                  },
                  required: ["username", "access_token", "refresh_token"]
                }
              example:
                username: admin
                access_token: access_token
                refresh_token: refresh_token
        400:
          description: Bad request body. Make sure all required fields are present.
        403:
          description: User already exists and couldn't be created.
  /auth/login:
    post:
      tags:
      - auth
      summary: Get a bearer token for an existing user.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "username": { "type": "string" },
                  "password": { "type": "string" }
                },
                required: ["username", "password"]
              }
            example:
              username: admin
              password: password
      responses:
        200:
          description: Login successful.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "username": { "type": "string" },
                    "access_token": { "type": "string" },
                    "refresh_token": { "type": "string" }
                  },
                  required: ["username", "access_token", "refresh_token"]
                }
              example:
                username: admin
                access_token: access_token
                refresh_token: refresh_token
        400:
          description: Bad request body. Make sure all required fields are present.
        401:
          description: Wrong credentials.
        404:
          description: User not found.
  /auth/refresh:
    post:
      tags:
      - auth
      summary: Create a new access token using a refresh token
      operationId: refreshLogin
      security:
      - bearerAuth: []
      responses:
        200:
          description: Bearer token refreshed
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "access_token": { "type": "string" },
                  },
                  required: ["access_token"]
                }
              example:
                access_token: access_token
        401:
          description: Wrong credentials. Make sure the refresh token is in the header.
    get:
      tags:
      - auth
      summary: Determine whether an access token is still valid
      operationId: testAccess
      security:
      - bearerAuth: []
      responses:
        200:
          description: Access token is valid
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "username": { "type": "string" },
                  },
                  required: ["username"]
                }
              example:
                username: username
        401:
          description: Wrong credentials. Make sure the access token is in the header.
  /user/password:
    put:
      tags:
      - user
      summary: Update a user's password.
      operationId: updatePassword
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "old_password": { "type": "string" },
                  "password": { "type": "string" }
                },
                required: ["old_password", "password"]
              }
            example:
              old_password: "password"
              new_password: "password2"
        required: true
      responses:
        200:
          description: Password successfully updated.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "id": { "type": "integer" },
                    "parent_id": { "type": "integer" },
                    "owner": { "type": "integer" },
                    "title" : { "type" : "string" },
                    "goal_date": { "type": "string" },
                    "data": { "type": "string" }
                  },
                  required: ["id", "owner", "title"]
                }
              example:
                id: 2
                parent_id: 1
                owner: 1
                title: Existing note
                goal_date: "11/30/2019"
                data: Contents of existing note.
        401:
          description: Authorization token is not present in header.
        403:
          description: Old password does not match existing password.
  /user/email:
    put:
      tags:
      - user
      summary: Update a user's email.
      operationId: updateEmail
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "new_email": { "type": "string" }
                },
                required: ["new_email"]
              }
            example:
              new_email: "newemail@newemail.com"
        required: true
      responses:
        200:
          description: Email successfully updated.
        400:
          description: Email is not a valid email.
        401:
          description: Authorization token is not present in header.
  /notes:
    get:
      tags:
      - notes
      summary: Get all notes linked to the Bearer token's account.
      operationId: getAllNotes
      security:
      - bearerAuth: []
      responses:
        200:
          description: Notes obtained.
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties: {
                    "id": { "type": "integer" },
                    "parent_id": { "type": "integer" },
                    "owner": { "type": "integer" },
                    "title" : { "type" : "string" },
                    "goal_date": { "type": "object" },
                    "data": { "type": "string" }
                  }
                  required: ["id", "owner", "title"]
              example:
                - id: 2
                  parent_id: 1
                  owner: 1
                  title: Existing note
                  goal_date: "11/30/2019"
                  data: Contents of existing note.
                - id: 1
                  owner: 1
                  title: Existing note parent
        401:
          description: Authorization token is not present in header.
    post:
      tags:
      - notes
      summary: Create a new note with the Bearer token's account as an owner.
      operationId: createNote
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "title": { "type": "string" },
                  "parent_id": { "type": "integer" },
                  "goal_date": { "type": "string" },
                  "data": { "type": "string" }
                },
                required: ["title"]
              }
            example:
              title: "New note"
              goal_date: "help"
              data: "01/01/2020"
        required: true
      security:
      - bearerAuth: []
      responses:
        200:
          description: Note created.
        401:
          description: Authorization token is not present in header.
  /notes/{note_id}:
    get:
      tags:
      - notes
      parameters:
      - in: path
        name: note_id
        description: "ID of note to get information for."
        required: true
        schema:
          type: integer
      summary: Get all relevant data for specific note.
      operationId: getNote
      security:
      - bearerAuth: []
      responses:
        200:
          description: Note obtained.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "id": { "type": "integer" },
                    "parent_id": { "type": "integer" },
                    "owner": { "type": "integer" },
                    "title" : { "type" : "string" },
                    "goal_date": { "type": "string" },
                    "data": { "type": "string" }
                  },
                  required: ["id", "owner", "title"]
                }
              example:
                id: 2
                parent_id: 1
                owner: 1
                title: Existing note
                goal_date: "11/30/2019"
                data: Contents of existing note.
        401:
          description: Authorization token is not present in header.
        403:
          description: Note does not exist or user is not authorized to view this note.
    put:
      tags:
      - notes
      parameters:
      - in: path
        name: note_id
        description: "ID of note to update."
        required: true
        schema:
          type: integer
      summary: Update note's content.
      operationId: updateNote
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "title": { "type": "string" },
                  "goal_date": { "type": "string" },
                  "data": { "type": "string" }
                }
              }
            example:
              title: "New note title"
              data: "This is the content of the note that just got updated."
        required: true
      security:
      - bearerAuth: []
      responses:
        200:
          description: Note updated.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "id": { "type": "integer" },
                    "title" : { "type" : "string" },
                    "goal_date": { "type": "string" },
                    "data": { "type": "string" },
                    "parent_id": { "type": "integer" }
                  },
                  required: ["id", "owner", "title"]
                }
              example:
                id: 2
                title: Existing note
                goal_date: "11/30/2019"
                data: Contents of existing note.
        400:
          description: Bad or malformed input.
        401:
          description: Authorization token is not present in header.
        403:
          description: Note does not exist or user is not authorized to modify this note.
    delete:
      tags:
      - notes
      parameters:
      - in: path
        name: note_id
        description: "ID of note to delete."
        required: true
        schema:
          type: integer
      summary: Delete note.
      operationId: deleteNote
      security:
      - bearerAuth: []
      responses:
        200:
          description: Note deleted.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "message deleted": {"type":"string"},

                  },
                }
              example:
                message deleted: "true"
        401:
          description: Authorization token is not present in header.
        403:
          description: Note does not exist or user is not authorized to delete this note.
  /categories:
    get:
      tags:
      - categories
      summary: Get all categories of the user who is logged in.
      operationId: GetAllCategories
      security:
      - bearerAuth: []
      responses:
        200:
          description: Categories obtained.
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties: {
                    "id": { "type": "integer" },
                    "name": { "type": "string" },
                    "color": { "type": "string" }
                  }
              example:
                - id: 2
                  name: science
                  color: "#010101"
                - id: 1
                  name: history
                  title: "#011101"
        401:
          description: Authorization token is not present in header.
    post:
      tags:
      - categories
      summary: Add a new category.
      operationId: NewCategory
      requestBody:
        content:
          application/json:
            schema:
              {
                type: "object",
                properties: {
                  "name": { "type": "string" },
                  "color": { "type": "string" }
                },
                required: ["name"]
              }
            example:
              name: biology
              color: "#451011"
      responses:
        200:
          description: Category added.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "id": { "type": "integer" },
                    "name": { "type": "string" },
                    "color": { "type": "string" }
                  },
                }
              example:
                id: 4
                name: math
                color: "#220022"
        400:
          description: Bad request body.
        401:
          description: Authentication token missing or expired.
          
  /categories/{category_name}:
    get:
      tags:
      - categories
      parameters: 
      - in: path
        name: category_name
        required: True
      summary: Get the note_ids of all notes belonging to this category.
      operationId: GetNoteCats
      security:
      - bearerAuth: []
        
      responses:
        200:
          description: Note_ids obtained.
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties: {
                    "note_id": { "type": "integer" }
                  }
              example:
                - note_id: 1
                - note_id: 3
                - note_id: 4
        401:
          description: Authorization token is not present in header.
        403:
          description: Category not found.
    delete: 
      tags:
      - categories
      parameters:
      - in: path
        name: category_name
        required: True
      summary: Delete the category and remove the category from the necessary notes.
      operationId: DeleteCategory
      security:
      - bearerAuth: []
      responses:
        200:
          description: Category deleted.
          content:
            application/json:
              schema:
                type: "array"
                items: 
                  type: "object"
                  properties: {
                     "count" : { "type": "integer" }
                  }
              example:
              - count: 6
              
  /notecat/{note_id}:
    get: 
      tags:
      - categories
      parameters:
      - in: path
        name: note_id
        required: True
      summary: Get all categories associated with the note.
      operationId: GetCategoriesForNote
      security:
      - bearerAuth: []
      responses:
        200: 
          description: Categories found.
          content: 
            application/json:
              schema:
                type: "array"
                items: 
                  type: "object"
                  properties: {
                    "id": {"type":"integer" },
                    "name": {"type":"string"},
                    "color": {"type":"string"}
                  }
                example:
                - id: 2
                  name: school
                  color: "#342100"
                - id: 6
                  name: social studies
                  color: "#342105"
        401:
          description: Authorization token is not present in header.
        403:
          description: Note not found.
    
    post:
      tags:
      - categories
      parameters:
      - in: path
        name: note_id
        required: True
      summary: Add one category to the note.
      operationId: AddCatToNote
      security:
      - bearerAuth: []
      responses:
        200:
          description: Category added to note.
          content:
            application/json:
              schema: 
                type: "object"
                properties: {
                  "note_id": {"type" : "integer"},
                  "category_id": {"type": "integer"},
                  "category_name": {"type": "string"}
                }
              example:
              - note_id: 3
                category_id: 2
                category_name: math
        401:
          description: Authorization token is not present in header.
        403:
          description: Note not found.
                
    delete:
      tags:
      - categories
      parameters:
      - in: path
        name: note_id
        required: True
      summary: Remove one category from the note.
      operationId: RemoveCatFromNote
      security:
      - bearerAuth: []
      responses:
        200:
          description: Category removed from note if present.
          content: 
            application/json:
              schema:
                type: "object"
                properties: {
                  "message": {"type": "string"}
                }
              example:
              - "message" : "category removed"
        401:
          description: Authorization token is not present in header.
        403:
          description: Note not found.
  /attach/upload:
    post:
      tags:
      - attach
      parameters: 
      - in: path
        name: note_id
        description: "ID of note to get information for."
        required: true
        schema:
          type: integer
      summary: Upload a file
      operationId: upload
      security: 
      - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              {
                type: "object",
                properties: {
                  "file": { "type": "string", format: byte, description: "Base-64 encoded contents of file"},
                  "filename": { "type": "string" },
                  "note_id": {"type": "integer"}
                },
                required: ["filename", "file", "note_id"]
              }
            example:
              #coming soon
              
        required: true
      responses:
        200:
          description: Attachment uploaded to database.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "attachment_id": {type: integer}
                  },
                  required: ["attachment_id"]
                }
              example:
                attachment_id: 5
        400:
          description: Bad request body. Make sure all required fields are present.
        401:
          description: Authorization token is not present in header.  
        403:
          description: Note does not exist or user is not authorized to add files to this note.
          
  /attach/{attachment_id}:
    get:
      tags:
      - attach
      parameters: 
      - in: path
        name: attachment_id
        description: "ID of note to get information for."
        required: true
        schema:
          type: integer
      summary: Get a file from database.
      operationId: getAttachment
      security: 
      - bearerAuth: []
      responses:
        200:
          description: Attachment found and returned.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "attachment_id": {type: integer},
                    "note_id": {type: integer},
                    "file": {type: string, format: byte, description: Base64 - encoded file}
                  },
                  required: ["attachment_id, note_id, file"]
                }
              example:
                attachment_id: 5
                note_id: 1
                file: 
        400:
          description: Bad request.
        401:
          description: Authorization token is not present in header.  
        403:
          description: Attachment does not exist. 
      
    delete:
      tags:
        - attach
      parameters:
      - in: path
        name: attachment_id
        description: "ID of attachment to delete."
        required: true
        schema:
          type: integer
      summary: Delete attachment.
      operationId: deleteAttachment 
      security: 
      - bearerAuth: []
      responses:
        200:
          description: Note deleted.
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: {
                    "note_id": {type: integer}
                    
                  },
                }
              example:
               note_id: 3
        401:
          description: Authorization token is not present in header.    
        403:
          description: Attachment does not exist or user is not authorized to delete this attachment.
components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT 
